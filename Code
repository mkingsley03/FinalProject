echo "# FinalProject" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/mkingsley03/FinalProject.git
git push -u origin main
'''
Name: Morgan Kingsley
CS230: Section 2
Data: 2017_Crashes_10000_sample.csv
Description:
This program analyzes data on vehicle crashes in Massachusetts in 2017.
The website produced has 5 pages in addition to the home page, which provides an introductory statement to the data.
Page 1: Map of all car crashes in Massachusetts in 2017.
Page 2: Bar chart of all crashes sorted by damage type.
        Bar chart of crashes sorted by damage type where the user can sort by county.
Page 3: Bar chart of top 10 vehicle maneuvers that resulted in crashes.
        Bar chart of top vehicle maneuver that resulted in crashes where the user can sort by county and view statistics on total crashes for the selected county.
Page 4: User can select multiple cities to compare road conditions during crashes, visualized as a table.
Page 5: User can select a time period and view the number of crashes that occurred in that period, sorted by county, visualized in a bar chart.

Queries that can be answered:
1. What is the most common damage from a vehicle crash in <county>?
2. What are the top vehicle maneuvers during a crash in <county>?
3. How do the road conditions during a crash compare in these <cities>?
4. How many crashes occurred during <time period> by county?

I referenced examples:
https://ebonnette-cs230-final-project.streamlit.app/                (map, table, graph color selection widget)
https://buildingviolations.streamlit.app/                           (time period slider)
https://edgarcs230final.streamlit.app/#boston-bluebike-insight      (sidebar widget)
for inspiration from both their queries and their coding for various visualizations.
'''

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import pydeck as pdk
from datetime import datetime

def crashMap(df):
    st.header(":blue[Map of Car Crashes in Massachusetts in 2017]", divider="blue")
    
    #The initial state that the map opens in: initial point is the point resulting from the average latitude and longitude from the df
    view_state = pdk.ViewState(
        latitude=df["LAT"].mean(),
        longitude=df["LON"].mean(),
        zoom=11,
        pitch=0)

    layer1 = pdk.Layer('ScatterplotLayer',
                      data=df,
                      get_position='[LON, LAT]', #retrieve locations for each crash from the longitude and latitude columns of the df
                      get_radius=100, #radius for each data point
                      get_color=[0,0,255], #color for each data point use R,G,B array (maximum blue intensity)
                      pickable=True #allows users to click on the data point to view more information (given in the tool time)
                      )
    
    #When hovering over a crash point, the tool tip will show the crash severity description
    tool_tip = {"html": "Crash Severity Description:<br/> <b>{CRASH_SEVERITY_DESCR}</b> ", #<br> indicates a break and <b> indicates that the text should be bold
                "style": { "backgroundColor": "blue",
                            "color": "white"}
                }
    #Renders the map using styles from pydeck
    massCrashMap = pdk.Deck(map_style='mapbox://styles/mapbox/outdoors-v11',
                   initial_view_state=view_state,
                   layers=[layer1],
                   tooltip= tool_tip
                   )
    #Shows the map
    st.pydeck_chart(massCrashMap)
    
    #Calculates total crashes
    total_crashes = len(df)
    
    #Info bar stating the total crashes (in this case 10,000, although there were more, because the data was a sample of all crashes during the year)
    st.info(f"Total Car Crashes in Massachusetts in 2017: {total_crashes}")

def calculateCountyStats(df, selectedCounty='BARNSTABLE'): #Python coding feature: function with two or more parameters, one of which has a default value
    #Calculate and return statistics related to crashes in the selected county
    #If no county is selected, Barnstable County is the default value
    
    #Creates a df containing only information on crashes that took place in the selected county
    county_df = df[df['CNTY_NAME'] == selectedCounty]

    #Calculates total crashes in the selected county
    totalCrashes = len(county_df)
 
    #Determines the most common vehicle maneuver action to cause a crash for the selected county
    mostFrequentType = county_df['VEHC_MNVR_ACTN_CL'].mode().values[0] #.mode() returns a df so [0] accessing the actual mode value (first value of the df)
    
    #Calculates how many times the most common vehicle maneuver action occurred for the selected county
    mostFrequentCount = county_df['VEHC_MNVR_ACTN_CL'].value_counts().max() #.value_counts counts the times each unique vehicle maneuver action occurs

    return totalCrashes, mostFrequentType, mostFrequentCount #Python coding feature: function that returns more than one value

def topCrashTypes(df):
    #Displays the top 10 vehicle maneuver types in Massachusetts using a bar chart
    st.header(":blue[Top Vehicle Maneuver Types Resulting in Crashes in MA (2017)]", divider="blue")
    
    #Counts the number of crashes for each maneuver type
    counts=df.groupby(by='VEHC_MNVR_ACTN_CL').OBJECTID.count()
    
    #Sorts those values from largest to smallest in the original series rather than returning a new one
    counts.sort_values(ascending=False,inplace=True)
    
    #Takes only the top 10 maneuvers
    topCrashTypes = counts.head(10)
    
    #Create a new empty figure object
    fig1 = plt.figure()
    
    #User can choose the color of the bar graph
    color = st.color_picker("Choose Graph Color:", '#9ed6f7')
    
    #Bar chart
    plt.bar(topCrashTypes.index, topCrashTypes, color=color)
    
    #Bar chart details
    plt.title('Top 10 Vehicle Maneuver Types in MA', fontsize=18, fontweight='bold')
    plt.xlabel('Vehicle Maneuver Type', fontsize=12, fontweight='bold')
    plt.xticks(range(len(topCrashTypes.index)),rotation=40,ha='right', fontsize=10)
    plt.ylabel('Count', fontsize=12, fontweight='bold')
    fig1.set_facecolor('#dbedff')

    #Show chart
    st.pyplot(fig1)
    
    #Comment to describe x-axis ticks
    st.write(":blue[* V1 indicates vehicle 1 and V2 indicates vehicle 2 in the crash.]")

    #Display top vehicle maneuvers resulting in a crash by county
    st.header(":blue[Top Crash Maneuver Types by County]", divider="blue")
    
    # Filter df based on selected county
    county = st.selectbox("Select County", sorted(df['CNTY_NAME'].dropna().unique()))
    filtered_df = df[df['CNTY_NAME'] == county]

    #Grouping by maneuver type
    maneuver_type_df = filtered_df.groupby(['VEHC_MNVR_ACTN_CL'])

    #Number of crashes for each maneuver types
    counts=maneuver_type_df.OBJECTID.count()
    
    #Sorts those values from largest to smallest in the original series rather than returning a new one
    counts.sort_values(ascending=False,inplace=True)
    
    #Takes up to the top 20 maneuvers
    topCrashTypesByCounty = counts.head(20)

    #Create a new empty figure object
    fig2 = plt.figure()
    
    #Bar chart for crash-causing maneuvers by county
    plt.bar(topCrashTypesByCounty.index,topCrashTypesByCounty)
    
    #Bar chart details
    plt.title(f'Top Vehicle Maneuver Types in {county}', fontsize=18, fontweight='bold')
    plt.xlabel('Vehicle Maneuver Type', fontsize=12, fontweight='bold')
    plt.xticks(rotation=40, ha='right')
    plt.ylabel('Count', fontsize=14, fontweight='bold')
    fig2.set_facecolor('#dbedff')

    #Show the chart
    st.pyplot(fig2)
    
    #Comment to describe x-axis ticks
    st.write(":blue[* V1 indicates vehicle 1 and V2 indicates vehicle 2 in the crash.]")
    

    #Display statistics related to bar chart using calculateCountyStats() function
    totalCrashes, most_frequent_maneuver_type, most_frequent_count = calculateCountyStats(df, county)

    #Info bars with information on crashes for the selected county
    st.info(f"Total Crashes in {county}: {totalCrashes}")
    st.info(f"Most Frequent Maneuver Type in {county}: {most_frequent_maneuver_type}, Count: {most_frequent_count}")


def compareCities(df):
    st.header(":blue[Compare Cities]", divider="blue")
    #Calculate and display what percentage of crashes occurred due to each type of road condition for each selected city

    
    #User can multi-select cities to compare statistics
    selected_cities = st.multiselect("Select Cities", sorted(df['CITY_TOWN_NAME'].unique()))

    #Filter df based on selected cities
    df_filtered = df[df['CITY_TOWN_NAME'].isin(selected_cities)] #.isin returns a boolean series; use df[] to turn into a df containing only information for the selected cities 

    #Calculate the number of crashes for each type of road condition for the selected cities
    cityInfo = []
    for city in selected_cities: #Python coding feature: loop that iterates through items in a list
        city_data = df_filtered[df_filtered['CITY_TOWN_NAME'] == city]
        total_crashes = len(city_data)
        dryCrashes = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Dry']) 
        snowCrashes = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Snow'])
        wetCrashes = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Wet'])
        iceCrashes = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Ice'])
        slushCrashes = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Slush'])
        unknown = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Unknown'])
        notReported = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Not reported'])
        others = len(city_data[city_data['ROAD_SURF_COND_DESCR'] == 'Sand, mud, dirt, oil, gravel'])

        #Calculate percentages
        percentDry = (dryCrashes / total_crashes) * 100
        percentSnow = (snowCrashes / total_crashes) * 100
        percentWet = (wetCrashes / total_crashes) * 100
        percentIce = (iceCrashes / total_crashes) * 100
        percentSlush = (slushCrashes / total_crashes) * 100
        percentUnknown = ((unknown+notReported) / total_crashes) * 100
        percentOthers = (others / total_crashes) * 100
        
        # Find the most common maneuver type and its count
        most_common_type = city_data['MANR_COLL_DESCR'].mode().values[0]
        count = city_data[city_data['MANR_COLL_DESCR'] == most_common_type]['MANR_COLL_DESCR'].count()

        cityInfo.append({
            'City': city,
            'Total Crashes': total_crashes,
            '% Dry Road Crashes': f"{percentDry:.0f}%",
            '% Snowy Road Crashes': f"{percentSnow:.0f}%",
            '% Wet Crashes': f"{percentWet:.0f}%",
            '% Icy Crashes': f"{percentIce:.0f}%",
            '% Slushy Crashes': f"{percentSlush:.0f}%",
            '% Not Reported': f"{percentUnknown:.0f}%",
            '% Others*': f"{percentOthers:.0f}%",
            
            'Most Common Crash Type : Count': f"{most_common_type}: {count}"
        })
        
    #Check if at least two cities are selected
    if len(selected_cities) < 2:
        st.warning("Please select at least two cities.") #Message displays only when less than two cities are selected
    else: 
        #Create a df from the percentages with city as the index
        cityInfo_df = pd.DataFrame(cityInfo)
        
        #Make city the index
        cityInfo_df.set_index('City', inplace=True)

        #Display the table with the percentages
        st.subheader(":blue[Statistics for Each City:]")
        st.write(":blue[*: Others include sand, mud, dirt, oil, and gravel.]")
        st.table(cityInfo_df)
    
def damageDescription(df):
    st.header(":blue[Damages after Crash]", divider="blue")
    
    #Create a new empty figure object
    fig1 = plt.figure()
    
    #Groups and counts crashes by damage description
    damageCounts = df.groupby(by=['CRASH_SEVERITY_DESCR']).OBJECTID.count()
   
    #Bar chart
    plt.bar(damageCounts.index, damageCounts)

    #Bar chart details
    plt.title("Crashes Sorted By Damage Description", fontsize=18, fontweight='bold')
    plt.xlabel("Crash Damage Type", fontsize=12, fontweight='bold')
    plt.xticks(fontsize=5)
    plt.ylabel("Count", fontsize=12, fontweight='bold')
    fig1.set_facecolor('#dbedff')
    
    #Shows the chart
    st.pyplot(fig1)  
      
    st.header(":blue[Damage Descriptions by County]", divider="blue")
    
    #Create a new empty figure object
    fig2 = plt.figure()
    
    #Allows user to choose a county from a list of unique counties in alphabetical order
    county = st.selectbox("Select County", sorted(df['CNTY_NAME'].dropna().unique()))
    
    #Creates a df only including crashes from the specified county
    filtered_df = df[df['CNTY_NAME'] == county]
    
    #Groups and counts crashes by damage description for the specified county
    damageCountsByCounty = filtered_df.groupby(['CRASH_SEVERITY_DESCR']).OBJECTID.count()
        
    #Bar chart
    plt.bar(damageCountsByCounty.index, damageCountsByCounty)
    
    #Bar chart details
    plt.title(f'Damage Description Types in {county}', fontsize=18, fontweight='bold')
    plt.xlabel('Crash Damage Type', fontsize=12, fontweight='bold')
    plt.xticks(fontsize=5, rotation=45, ha='right')
    plt.ylabel('Count', fontsize=12, fontweight='bold')
    fig2.set_facecolor('#dbedff')
    
    #Shows the chart
    st.pyplot(fig2)

def dateSlider(df):
    st.header(":blue[Vehicle Crashes in 2017]", divider="blue")

    # Create slider for date range
    startTime, endTime = st.slider(
        "Specify time interval:",
        datetime(2017, 1, 1), datetime(2017, 12, 31), #total range on slider
        value=(datetime(2017, 6, 1), datetime(2017, 8, 1)), #initial range on the slider 
        format="MM/DD/YY")

    #Filters df to include only rows where the date values (input via the slider) fall within the range defined by startTime and endTime
    filtered_df = df[(pd.to_datetime(df["CRASH_DATE_TEXT"]) >= pd.to_datetime(startTime)) & (pd.to_datetime(df["CRASH_DATE_TEXT"]) <= pd.to_datetime(endTime))]
        
    st.write(':blue[Vehicle Crashes Within Specified Time Interval Sorted by County:]')
    
    #Groups and counts crashes by county for the specified time period
    info = filtered_df.groupby(['CNTY_NAME']).OBJECTID.count()
    
    #Create a new empty figure object
    fig = plt.figure()
    
    #Bar chart
    plt.bar(info.index, info)
    
    #Bar chart details
    plt.title('Car Crashes by County for Specified Time Period', fontsize=18, fontweight='bold')
    plt.xlabel('County', fontsize=12, fontweight='bold')
    plt.xticks(rotation=40, ha='right')
    plt.ylabel('Count', fontsize=12, fontweight='bold')
    fig.set_facecolor('#dbedff')
    
    #Show the plot
    st.pyplot(fig)
    
    #Calculate total crashes during the selected time period
    totalCrashes=len(filtered_df)
    st.info(f"Total Crashes from {startTime.date()} to {endTime.date()}: {totalCrashes}") #.date() extracts just the date from datetime object which includes both the date and the time
    
def main():
    df = pd.read_csv("2017_Crashes_10000_sample.csv")
    
    st.set_page_config(page_title="Massachusetts Vehicle Crashes 2017", initial_sidebar_state="expanded" )
    page = st.sidebar.selectbox("Select a page", ["Home", "Crashes Map", "Damage Descriptions", "Top Crash Maneuvers", "Compare Cities", "Crashes by Date"])
    
    if page == "Home":
        st.header(":blue[Massachusetts Vehicle Crashes in 2017]", divider="blue")
        st.subheader(":blue[This website allows users to explore and analyze data on vehicle crashes over the course of one year in Massachusetts.]")
        st.write(":blue[The data is a 10,000 crash sample of all crashes during 2017 in Massachusetts.]")
        st.image("MA_Map.jpg")
        
    elif page == "Crashes Map":
        crashMap(df)
    elif page == "Damage Descriptions":
        damageDescription(df)
    elif page == "Top Crash Maneuvers": 
        topCrashTypes(df)
    elif page == "Compare Cities":
        compareCities(df)
    elif page == "Crashes by Date":
        dateSlider(df)
main()




